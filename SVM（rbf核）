import numpy as np
import pandas as pd
import os
import matplotlib.pyplot as plt
from sklearn import svm

ratio = []#创建空列表append提取到的新特征pass_ratio 和 shots_ratio
data = pd.read_table('C:/Users/gd/Downloads/mlin40-master/linear inseparable.csv')  #读取分析数据
category = data.iloc[:,0]  
pass_ratio = data.iloc[:,1] / data.iloc[:,2]  #样本实际使用的特征pass_ratio
shot_ratio = data.iloc[:,3] / data.iloc[:,4]  #另一个特征shots_ratio

ratio.append(pass_ratio)  #新特征append 到新特征数据集
ratio.append(shot_ratio)
ratio = np.array(ratio)   #创建新特征矩阵
ratio = ratio.astype('float')  #矩阵数据集形

#核函数为：径向核函数rbf,ganma越大，核的宽度实际上就越窄，正则化书C参数越大，正则化效果越弱，无穷时表示未经过正则化处理
linear_svm = svm.SVC(kernel='rbf', gamma=5, C=1e6).fit(ratio.T, category)

x_min, x_max = ratio[0].min() - 0.05, ratio[0].max() + 0.05
y_min, y_max = ratio[1].min() - 0.05, ratio[1].max() + 0.05
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01), np.arange(y_min, y_max, 0.01))
xy = np.vstack([xx.ravel(), yy.ravel()]).T
Z = linear_svm.decision_function(xy).reshape(xx.shape)
 
plt.scatter(pass_ratio[category == 0], shot_ratio[category == 0], c='r', marker = 'o')
plt.scatter(pass_ratio[category == 1], shot_ratio[category == 1], c='b', marker = '^')
plt.contour(xx, yy, Z, colors='k', levels=[-1, 0, 1], alpha=0.5, linestyles=['--', '-', '--'])
plt.title("playing style discrimination with kernel SVM")
plt.xlabel('pass ratio')
plt.ylabel('shot ratio')
plt.show()

#和上一个SVM模型相比，加入核函数基于数据的相似性度量在高维的特征空间上找到线性决策边界，再将结果边界降维投影到低维空间的非线性决策边界。
#计算出的相似度为决策的分类依据，物以类聚的思想
#核函数是局部化的工具
